spring.application.name=ourotest

ouroboros.enabled=true
ouroboros.server.url=https://api.example.com
ouroboros.server.description=Production API Server

# ===== H2 Database 설정 =====
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# H2 Console (개발 편의)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# ===== JPA 설정 =====
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true


# ===== 로깅 설정 =====
# Ouroboros SDK의 debug 로그를 console에 출력
logging.level.kr.co.ouroboros=DEBUG
# 전체 애플리케이션의 로그 레벨 설정 (필요시)
logging.level.root=INFO
# OpenTelemetry 관련 로깅
logging.level.io.opentelemetry.exporter.otlp=DEBUG
logging.level.io.opentelemetry.sdk=DEBUG
# Spring Boot Actuator 로깅
logging.level.org.springframework.boot.actuate=DEBUG
# Spring Boot 자동 계측 로깅
logging.level.org.springframework.boot.actuate.autoconfigure.tracing=DEBUG
logging.level.io.micrometer.observation=DEBUG
# Hibernate 계측 관련 로깅
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE
logging.level.org.hibernate.stat=DEBUG
# Micrometer Tracing의 Hibernate 계측 확인
logging.level.io.micrometer.tracing.bridge.hibernate=DEBUG


# ===== Tempo 조회용 (Ouroboros SDK에서 QueryQL로 사용) =====
ouroboros.tempo.enabled=true
ouroboros.tempo.base-url=http://${TEMPO_HOST:localhost}:${TEMPO_UI_PORT:3200}
ouroboros.tempo.query-timeout-seconds=10
ouroboros.tempo.poll-interval-millis=500
ouroboros.tempo.max-poll-attempts=5
ouroboros.method-tracing.enabled=true
ouroboros.method-tracing.allowed-packages=com.c102.ourotest

# ===== OpenTelemetry Exporter (앱 → Tempo) =====
management.tracing.enabled=true
management.otlp.tracing.endpoint=http://${TEMPO_HOST:localhost}:${TEMPO_HTTP_PORT:4318}/v1/traces
management.otlp.tracing.export.http.enabled=true
management.otlp.tracing.export.grpc.enabled=false
management.otlp.tracing.headers.X-Scope-OrgID=default
management.tracing.export.otlp.protocol=http/protobuf
management.tracing.propagation.type=w3c,b3

# ===== Spring Boot Actuator =====
management.endpoints.web.exposure.include=health,info,metrics,tracing
management.endpoint.health.show-details=always

# ===== Micrometer Tracing =====
management.tracing.sampling.probability=1.0
logging.level.io.micrometer.tracing=DEBUG
logging.level.io.opentelemetry=DEBUG

# ===== Spring Boot 자동 계측 활성화 =====
# Spring Boot가 자동으로 계측하는 기능들 활성화
management.tracing.enabled=true
management.tracing.observation.enabled=true

# 데이터베이스 계측 활성화 (JPA/Hibernate)
management.tracing.jdbc.enabled=true
management.tracing.jpa.enabled=true

# Spring MVC 계측 활성화
management.tracing.web.enabled=true
management.tracing.web.client.enabled=true

otel.exporter.otlp.endpoint=http://localhost:4317
otel.resource.attributes=service.name=ourotest
otel.traces.exporter=otlp